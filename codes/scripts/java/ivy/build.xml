
<project name="go-ivy" default="go" xmlns:ivy="antlib:org.apache.ivy.ant">
    <import file="ivy-build.xml" />
    
    <property name="build.dir" value="build" />
    <property name="src.dir" value="src" />

	<!-- ================================= 
          target: go
         ================================= -->
    <target name="go" depends="install-ivy, generate-src, resolve" 
            description="--> resolve dependencies, compile and run the project">
      <echo message="using ivy to resolve commons-lang 2.1..."/>
        <!-- here comes the magic line: asks ivy to resolve a dependency on 
             commons-lang 2.1 and to build an ant path with it from its cache  -->

<!--
        <ivy:cachepath organisation="commons-lang" module="commons-lang" revision="2.1" 
                       pathid="lib.path.id" inline="true"/>
    -->    
		<echo message="compiling..."/>
        <mkdir dir="${build.dir}" />
        <javac srcdir="${src.dir}" destdir="${build.dir}" classpathref="lib.path.id" />
        
		<echo>
We are now ready to execute our simple program with its dependency on commons-lang.
Let's go!
		</echo>
        <java classname="example.Hello">
            <classpath>
                <path refid="lib.path.id" />
                <path location="${build.dir}" />
            </classpath>
        </java>
    </target>

	<!-- ================================= 
          target: generate-src
            'Generates' the class source. It actually just echo a simple java 
            source code to a file. In real life this file would already be
            present on your file system, and this target wouldn't be necessary.
         ================================= -->
    <target name="generate-src">
        <mkdir dir="${src.dir}/example" />
        <echo file="${src.dir}/example/Hello.java">
package example;

import org.apache.commons.lang.WordUtils;

public class Hello {
    public static void main(String[] args) {
        String  message = "hello ivy !!!!";
        System.out.println("standard message : " + message);
        System.out.println("capitalized by " + WordUtils.class.getName() 
                                + " : " + WordUtils.capitalizeFully(message));
    }
}
        </echo>
    </target>

    <target name="war">
      <property name="lib.dir" value="war-build" />
      <!-- the 'war' in the pattern is actually a conf name from ivy.xml -->
      <ivy:retrieve pattern="${lib.dir}/war/[artifact].[ext]"/>

 <!-- webxml="${resources.dir}/web.xml"> -->
    <war destfile="test.war" needxmlfile="fale" >
        <lib dir="${lib.dir}/war"/>
    </war>
    </target>

</project>
