<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>deriving on Corner case</title><link>https://freizl.github.io/tags/deriving/</link><description>Recent content in deriving on Corner case</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>Haisheng Wu</copyright><lastBuildDate>Tue, 14 Jun 2011 00:00:00 +0000</lastBuildDate><atom:link href="https://freizl.github.io/tags/deriving/index.xml" rel="self" type="application/rss+xml"/><item><title>Deriving</title><link>https://freizl.github.io/posts/deriving/</link><pubDate>Tue, 14 Jun 2011 00:00:00 +0000</pubDate><guid>https://freizl.github.io/posts/deriving/</guid><description>Deriving What the cool thing that Deriving does is actually automaticlly implementing instance for perticular type class.
For instance, a Person derives Eq
data Person = Person { firstName :: String , lastName :: String , age :: Int } deriving Eq Then we are able to compare two Persons because Haskell make the type Person to be a instance of typeclass Eq.
Take another example,</description></item></channel></rss>