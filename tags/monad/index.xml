<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>monad on Corner case</title><link>https://freizl.github.io/tags/monad/</link><description>Recent content in monad on Corner case</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>Haisheng Wu</copyright><lastBuildDate>Sat, 07 Apr 2012 00:00:00 +0000</lastBuildDate><atom:link href="https://freizl.github.io/tags/monad/index.xml" rel="self" type="application/rss+xml"/><item><title>Magic Monad Transformer</title><link>https://freizl.github.io/posts/magic-monad-transformer/</link><pubDate>Sat, 07 Apr 2012 00:00:00 +0000</pubDate><guid>https://freizl.github.io/posts/magic-monad-transformer/</guid><description>Monad-Transformer The code fragment below is from chapter 18 Monad Transform of 1.
When the first time I read this example, I was confused with how it is possible to use ask of MonadReader (line 6) and get of MonadState (line 13) functions in the same App Monad content.
The only reasonable explanation is that App is both MonadReader and MonadState. While looking at App type definition (line 1), seems it is not possible.</description></item><item><title>Max File Size</title><link>https://freizl.github.io/posts/max-file-size/</link><pubDate>Tue, 21 Jun 2011 00:00:00 +0000</pubDate><guid>https://freizl.github.io/posts/max-file-size/</guid><description>While doing some refactoring work on solution from this guy1, I realized a pretty trivial thing about Manod method &amp;gt;&amp;gt;=.
Take a look at its definition:
Prelude&amp;gt; :t (&amp;gt;&amp;gt;=) (&amp;gt;&amp;gt;=) :: (Monad m) =&amp;gt; m a -&amp;gt; (a -&amp;gt; m b) -&amp;gt; m b Both a and b ought to be some Monadic type! In other words, all computation glued together by &amp;gt;&amp;gt;= have same Manodic type.
It is really straightforward however I did not have that in mind.</description></item><item><title>MapM</title><link>https://freizl.github.io/posts/mapm/</link><pubDate>Tue, 14 Jun 2011 00:00:00 +0000</pubDate><guid>https://freizl.github.io/posts/mapm/</guid><description>How to understand the following computation result? Prelude&amp;gt; mapM id [Just 1, Nothing, Just 3] Nothing &amp;lsquo;Reason about&amp;rsquo; mapM :: (a -&amp;gt; m b) -&amp;gt; [a] -&amp;gt; m [b] id :: a -&amp;gt; a sequence :: (Monad m) =&amp;gt; [m a] -&amp;gt; m [a] Therefore,
&amp;gt; a = Maybe Int &amp;gt; m = Maybe &amp;gt; b = Int the mapM and sequence is implemented like this:</description></item><item><title>A Really Trivial Monad</title><link>https://freizl.github.io/posts/a-really-trivial-monad/</link><pubDate>Sun, 29 May 2011 00:00:00 +0000</pubDate><guid>https://freizl.github.io/posts/a-really-trivial-monad/</guid><description>Generally some people saying that Monad is a computation that take a &amp;lsquo;world&amp;rsquo; as parameter and produce a result along with modified &amp;lsquo;world&amp;rsquo;. And this a manner that doing impure in a pure language.
While thinking in terms of Parser, it means taking a String and produce a result along with the rest of the string which is not parsed1. Consequently, we think a monadic type in Haskell is just a function.</description></item></channel></rss>