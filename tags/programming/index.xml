<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Programming on Corner case</title><link>https://freizl.github.io/tags/programming/</link><description>Recent content in Programming on Corner case</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>Haisheng Wu</copyright><lastBuildDate>Thu, 03 Sep 2009 21:27:00 -0700</lastBuildDate><atom:link href="https://freizl.github.io/tags/programming/index.xml" rel="self" type="application/rss+xml"/><item><title>Verify Binary Search result with duplicate target in the array</title><link>https://freizl.github.io/posts/verify-binary-search-result-with/</link><pubDate>Thu, 03 Sep 2009 21:27:00 -0700</pubDate><guid>https://freizl.github.io/posts/verify-binary-search-result-with/</guid><description>Testing scenario: If testArray contains target at position n, then binarySearch (testArray, target) must return _n
_
public void assertTheory4(int[] testArray, int target, int returnValue) {
assertEquals(getTargetPosition(testArray, target), returnValue);
}
public int getTargetPosition(int[] testArray, int target) {
for (int i = 0; i &amp;lt; testArray.length; i++)
if (testArray[i] == target)
return i;
return -1;
}
Array=[2, 11, 36, 66, 104, 108, 108, 108, 122, 155, 159, 161, 191]
target=108
Binary Search 108 will return 6 while getTargetPosition return 5.</description></item><item><title>NameCheck of XML Validation</title><link>https://freizl.github.io/posts/namecheck-of-xml-validation/</link><pubDate>Tue, 01 Sep 2009 23:57:00 -0700</pubDate><guid>https://freizl.github.io/posts/namecheck-of-xml-validation/</guid><description>The beautiful part is build up a array with size 2^16, each value is 8bits, each bit indicate something like whether current character could be start of name, valid name.
For instance, number 4 is at 0x34 (decimal 52), so flags[52] = 0x0b (00001100), those 8bits 0/1 are indication.
Chapter 5 of has the detail.</description></item><item><title>Tail Call Optimization</title><link>https://freizl.github.io/posts/tail-call-optimization/</link><pubDate>Wed, 19 Aug 2009 21:41:00 -0700</pubDate><guid>https://freizl.github.io/posts/tail-call-optimization/</guid><description>A tail call is a subroutine call which is followed by a return to the calling code.
Tail calls are often optimized by interpreters and compilers of functional programming languages to more efficient forms of iteration.
See here and here.</description></item></channel></rss>