<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>haskell on Corner case</title><link>https://freizl.github.io/tags/haskell/</link><description>Recent content in haskell on Corner case</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>Haisheng Wu</copyright><lastBuildDate>Tue, 14 Jun 2011 00:00:00 +0000</lastBuildDate><atom:link href="https://freizl.github.io/tags/haskell/index.xml" rel="self" type="application/rss+xml"/><item><title>MapM</title><link>https://freizl.github.io/posts/mapm/</link><pubDate>Tue, 14 Jun 2011 00:00:00 +0000</pubDate><guid>https://freizl.github.io/posts/mapm/</guid><description>How to understand the following computation result? Prelude&amp;gt; mapM id [Just 1, Nothing, Just 3] Nothing &amp;lsquo;Reason about&amp;rsquo; mapM :: (a -&amp;gt; m b) -&amp;gt; [a] -&amp;gt; m [b] id :: a -&amp;gt; a sequence :: (Monad m) =&amp;gt; [m a] -&amp;gt; m [a] Therefore,
&amp;gt; a = Maybe Int &amp;gt; m = Maybe &amp;gt; b = Int the mapM and sequence is implemented like this:
mapM f xs = sequence (map f xs) sequence (c:cs) = do x &amp;lt;- c xs &amp;lt;- sequence cs return (x:xs) Hence the result could be understood in such way</description></item><item><title>A Really Trivial Monad</title><link>https://freizl.github.io/posts/a-really-trivial-monad/</link><pubDate>Sun, 29 May 2011 00:00:00 +0000</pubDate><guid>https://freizl.github.io/posts/a-really-trivial-monad/</guid><description>Generally some people saying that Monad is a computation that take a &amp;lsquo;world&amp;rsquo; as parameter and produce a result along with modified &amp;lsquo;world&amp;rsquo;. And this a manner that doing impure in a pure language.
While thinking in terms of Parser, it means taking a String and produce a result along with the rest of the string which is not parsed1. Consequently, we think a monadic type in Haskell is just a function.</description></item></channel></rss>