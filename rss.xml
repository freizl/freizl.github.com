<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Haisheng's Tech Blog All posts</title>
        <link>http://freizl.github.io/</link>
        <description><![CDATA[Haisheng's Tech Blog.]]></description>
        <atom:link href="http://freizl.github.io//rss.xml" rel="self"
                   type="application/rss+xml" />
        <lastBuildDate>Thu, 12 Mar 2015 00:00:00 UT</lastBuildDate>
        <item>
    <title>Notes: Out of the Tar Pit</title>
    <link>http://freizl.github.io//posts/2015-03-12-notes-out-of-the-tar-pit.html</link>
    <description><![CDATA[
<h1 id="notes">Notes</h1>
<ul>
<li>FP</li>
<li>Lambda calculus</li>
<li>combinatory logic</li>
<li>Von Neumann</li>
<li>the turning machine</li>
</ul>
<h1 id="further-reading">Further reading</h1>
<ul>
<li>Can Programming Be Liberated from the von Neumann Style? A Functional Style and Its Algebra of Programs</li>
<li>E. W. Dijkstra Archive: A review of the 1977 Turing Award Lecture</li>
</ul>
<h1 id="english">English</h1>
<ul>
<li>when u let the <a href="http://en.wikipedia.org/wiki/Camel%27s_nose">nose of the camel</a> into the tent, the rest of him will follow</li>
</ul>
<blockquote>
<p>They’re saying that if you have a method completely free of state management or side effects itself If that method invokes any other method , the ability to reason about our state free method is no longer simple You introduce a small thing (calling a function that changes state of some unrelated object, the nose of a camel into a tent) And it will quickly take over – your methods complexity is now significant and your tent is full of camel feces and spit Which actually reminds me : that ramda lib looks very interesting</p>
</blockquote>]]></description>
    <pubDate>Thu, 12 Mar 2015 00:00:00 UT</pubDate>
    <guid>http://freizl.github.io//posts/2015-03-12-notes-out-of-the-tar-pit.html</guid>
</item>
<item>
    <title>Notes: SF Bay Area, MUST-DO HIKES FOR EVERYONE</title>
    <link>http://freizl.github.io//posts/2015-02-18-notes-sf-bay-area-must-do-hiking.html</link>
    <description><![CDATA[
<h1 id="informations">Informations</h1>
<h2 id="administrations">Administrations</h2>
<ul>
<li>California State Parks</li>
<li>East Bay Regional Park District</li>
<li>Golden Gate National Recreation Area</li>
<li>Midpeninsula Regional Open Space District</li>
<li>Santa Clara County Parks and Recreation</li>
<li>San Mateo County Parks</li>
<li>Marin Municipal Water District</li>
<li>Marin County Open Space District</li>
</ul>
<h2 id="geography">Geography</h2>
<ul>
<li>Coast Ranges</li>
<li>Central Valley</li>
<li>subranges
<ul>
<li>Sonama</li>
<li>Mayacamas</li>
<li>Vaca mountains</li>
<li>Diablo Range</li>
<li>Santa Cruz Mountains</li>
</ul></li>
<li>Peaks
<ul>
<li>Mt. St. Helena</li>
<li>Mt. Hamilton</li>
<li>Mt. Diablo</li>
<li>Loma Prieta</li>
<li>Mt. Tamalpais</li>
<li>Sonama Mountain</li>
</ul></li>
<li>San Andreas Fault</li>
<li>Calaveras Fault</li>
</ul>
<h2 id="flora">Flora</h2>
<ul>
<li>oak woodland</li>
<li>savanna</li>
<li>riparian woodland</li>
<li>coast redwoods</li>
<li>douglas-fir</li>
<li>chaparral community</li>
<li>monkeyflower</li>
<li>redwood groves</li>
</ul>
<h2 id="faunna">Faunna</h2>
<ul>
<li>etc.</li>
</ul>
<h1 id="top-trails">Top trails</h1>
<h2 id="north-bay">North Bay</h2>
<ul>
<li>Mount Tamalpais: Middle Peak</li>
<li>Point Reyes National Seashore: Sky Trail</li>
<li>Mt. Burdell Open Space Preserve</li>
</ul>
<h2 id="easy-bay">Easy Bay</h2>
<ul>
<li>Black Diamond Mines Regional Preserve: Stewartville Loop</li>
<li>Mount Diablo State Park: Grand Loop</li>
<li>Pleasanton Ridge Regional Park</li>
</ul>
<h2 id="south-bay">South Bay</h2>
<ul>
<li>Henry W. Coe State Park</li>
<li>Almaden Quicksilver County Park</li>
</ul>
<h2 id="peninsula">Peninsula</h2>
<ul>
<li>Russian Ridge Open Space Preserve</li>
<li>Purisima Creek Redwoods Open Space Preserve</li>
<li>San Bruno Mountain State and County Park</li>
</ul>
<h1 id="links">Links</h1>
<ul>
<li><a href="http://www.nps.gov/goga">NPS - Golden Gate National Recreation Area</a></li>
<li><a href="http://www.nps.gov/pore">NPS - Point Reyes National Seashore</a></li>
<li><a href="http://www.skylinepark.org">Skyline Park Citizens Association - Napa</a></li>
<li><a href="http://parks.ca.gov">California State Parks</a></li>
<li><a href="http://www.marinopenspace.org">Marin County Open Space District</a></li>
<li><a href="http://www.mdia.org">Mt. Diablo Interpretive Association</a></li>
<li><a href="http://www.ebparks.org/">East Bay Regional Park District</a></li>
<li><a href="http://www.coepark.org/">Henry W. Coe State Park</a></li>
<li><a href="http://www.openspace.org/">Midpeninsula Regional Open Space District</a></li>
<li><a href="http://www.bahiker.com">Bay Area Hiker</a></li>
<li><a href="http://www.baynature.com">Bay Nature magazine</a></li>
</ul>
<h1 id="english-words">English words</h1>
<ul>
<li>california quail</li>
</ul>]]></description>
    <pubDate>Wed, 18 Feb 2015 00:00:00 UT</pubDate>
    <guid>http://freizl.github.io//posts/2015-02-18-notes-sf-bay-area-must-do-hiking.html</guid>
</item>
<item>
    <title>Improve Space Usage</title>
    <link>http://freizl.github.io//posts/2012-09-12-improve-space-usage.html</link>
    <description><![CDATA[
<p>It is example from [programming in haskell] video lection 12 by Eric M. I just like to know whether GHC profile tool could help to figure out such problem.</p>
<pre class="sourceCode literate literatehaskell"><code class="sourceCode literatehaskell"><span class="ot">&gt;</span> <span class="kw">module</span> <span class="dt">Main</span> <span class="kw">where</span>
<span class="ot">&gt;</span> 
<span class="ot">&gt;</span> sumWith1 v [] <span class="fu">=</span> v
<span class="ot">&gt;</span> sumWith1 v (x<span class="fu">:</span>xs) <span class="fu">=</span> sumWith1 (v<span class="fu">+</span>x) xs
<span class="ot">&gt;</span> 
<span class="ot">&gt;</span> sumWith2 v [] <span class="fu">=</span> v
<span class="ot">&gt;</span> sumWith2 v (x<span class="fu">:</span>xs) <span class="fu">=</span> (sumWith2 <span class="fu">$!</span> (v<span class="fu">+</span>x)) xs
<span class="ot">&gt;</span> 
<span class="ot">&gt;</span> test <span class="fu">=</span> sumWith2 <span class="dv">0</span> [<span class="dv">1</span><span class="fu">..</span><span class="dv">20000000</span>]
<span class="ot">&gt;</span> 
<span class="ot">&gt;</span> main <span class="fu">=</span> print test</code></pre>]]></description>
    <pubDate>Wed, 12 Sep 2012 00:00:00 UT</pubDate>
    <guid>http://freizl.github.io//posts/2012-09-12-improve-space-usage.html</guid>
</item>
<item>
    <title>Objects created at one commit</title>
    <link>http://freizl.github.io//posts/2012-04-12-git-one-commit.html</link>
    <description><![CDATA[
<h1 id="play-it">Play it</h1>
<h2 id="new-two-files">new two files</h2>
<pre class="sh"><code>haiswu@haiswu-VirtualBox:~/github/haisheng-homepage/test$ echo &quot;11111&quot; &gt; 1.txt
haiswu@haiswu-VirtualBox:~/github/haisheng-homepage/test$ echo &quot;22222&quot; &gt; 2.txt</code></pre>
<h2 id="git-add">git-add</h2>
<pre class="sh"><code>haiswu@haiswu-VirtualBox:~/github/haisheng-homepage/test$ git add .
haiswu@haiswu-VirtualBox:~/github/haisheng-homepage/test$ git st
# On branch master
#
# Initial commit
#
# Changes to be committed:
#   (use &quot;git rm --cached &lt;file&gt;...&quot; to unstage)
#
#	new file:   1.txt
#	new file:   2.txt
#</code></pre>
<h2 id="no-objects-created-yet">no objects created yet</h2>
<pre class="sh"><code>haiswu@haiswu-VirtualBox:~/github/haisheng-homepage/test$ git rev-list --objects --all</code></pre>
<h2 id="git-commit">git-commit</h2>
<pre class="sh"><code>haiswu@haiswu-VirtualBox:~/github/haisheng-homepage/test$ git ci &quot;first commit&quot;
[master (root-commit) 8ef1919] first commit
 2 files changed, 2 insertions(+), 0 deletions(-)
 create mode 100644 1.txt
 create mode 100644 2.txt
</code></pre>
<h2 id="git-obj-list">git-obj-list</h2>
<pre class="sh"><code>
haiswu@haiswu-VirtualBox:~/github/haisheng-homepage/test$ git rev-list --objects --all
8ef1919e4ca33cf602488a27b5671a6b6acf754b
8ed6deeabbbb89cda775aafc10745ea40dcd8456
f7c6dd0164fe0eb4fde767f9e731a6c8ade0b69f 1.txt
0ac1ae0ae201d8db7ac29015a6ba7494db37d59c 2.txt
</code></pre>
<h2 id="what-are-they">what are they</h2>
<pre class="sh"><code>## | Blob objects
~/github/haisheng-homepage/test$ git cat-file -p f7c6dd0164fe0eb4fde767f9e731a6c8ade0b69f
11111
~/github/haisheng-homepage/test$ git cat-file -p 0ac1ae0ae201d8db7ac29015a6ba7494db37d59c
22222

## | Commit objects
~/github/haisheng-homepage/test$ git cat-file -p 8ef1919e4ca33cf602488a27b5671a6b6acf754b
tree 8ed6deeabbbb89cda775aafc10745ea40dcd8456
author Haisheng.W.WU &lt;freizl@gmail.com&gt; 1334230087 +0800
committer Haisheng.W.WU &lt;freizl@gmail.com&gt; 1334230087 +0800

first commit

## | Tree objects
~/github/haisheng-homepage/test$ git cat-file -p 8ed6deeabbbb89cda775aafc10745ea40dcd8456
100644 blob f7c6dd0164fe0eb4fde767f9e731a6c8ade0b69f	1.txt
100644 blob 0ac1ae0ae201d8db7ac29015a6ba7494db37d59c	2.txt
</code></pre>
<h1 id="further">Further</h1>
<ul>
<li><a href="" title="http://book.git-scm.com/">Git object model</a></li>
<li><a href="" title="http://0.0.0.0:9900/posts/readings/2012-04-08-notes-progit.html#internal">Git internal in one image</a></li>
</ul>]]></description>
    <pubDate>Thu, 12 Apr 2012 00:00:00 UT</pubDate>
    <guid>http://freizl.github.io//posts/2012-04-12-git-one-commit.html</guid>
</item>
<item>
    <title>Confused Constructor in JavaScipts</title>
    <link>http://freizl.github.io//posts/2012-04-12-confused-constructor-js.html</link>
    <description><![CDATA[
<h1 id="introduction">Introduction</h1>
<p>I can not quite remember what happened when invoking <code>new</code> over a function. While I’m looking at function <code>init</code> at jQuery source, the concern comes to me again.</p>
<p>Fourtunaly I think the answer at this<a href="#fn1" class="footnoteRef" id="fnref1"><sup>1</sup></a> thread turns out to be a quite clear explanation.</p>
<p>Just three things according to that answer.</p>
<ol style="list-style-type: decimal">
<li>Creates a new object. Its type is <code>object</code>.</li>
<li>Sets this new object’s internal, inaccessible, <code>[[prototype]]</code> property to be the constructor function’s external, accessible, <code>prototype</code> object. <em>Refer to line 11 at <a href="#sample">sample</a></em>.</li>
<li>Executes the constructor function, using the new object whenever <code>this</code> is mentioned.</li>
</ol>
<p>Regarding #2, we might have question like</p>
<ol style="list-style-type: lower-roman">
<li>What is constuctor function’s <code>prototype</code> object?</li>
<li>What is the <code>[[prototype]]</code>?</li>
</ol>
<p>The answer are</p>
<ol style="list-style-type: lower-roman">
<li>Function’s <code>prototype</code> property is automatically created which in turn has a constructor property pointing back to the function. <em>Refer to line 4 at <a href="#sample">sample</a></em></li>
<li>Basically <code>[[prototype]]</code> is used for prototype chain. Find details at here<a href="#fn2" class="footnoteRef" id="fnref2"><sup>2</sup></a> and Ecma-262<a href="#fn3" class="footnoteRef" id="fnref3"><sup>3</sup></a>.</li>
</ol>
<p>Therefore if we change the <code>prototype</code> property of the function before <code>new</code>, the <code>[[prototype]]</code> of instances afterwards is vary accordingly. <em>Refer to line 19 at <a href="#sample">sample</a></em></p>
<h1 id="sample">Sample</h1>
<ul>
<li><strong>tested at google chrome 18 and pay close attention to comments.</strong></li>
</ul>
<table class="sourceCode javascript numberLines"><tr class="sourceCode"><td class="lineNumbers"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
</pre></td><td class="sourceCode"><pre><code class="sourceCode javascript">
<span class="kw">var</span> fn1 = <span class="kw">function</span> () { <span class="kw">this</span>.<span class="fu">name</span> = <span class="st">&quot;fn1&quot;</span>; }

<span class="ot">fn1</span>.<span class="fu">prototype</span>          <span class="co">// Object { constructor: function () { this.name = &quot;fn1&quot;; }</span>
                       <span class="co">//        , __proto__: Object }</span>

<span class="ot">fn1</span>.<span class="fu">__proto__</span>          <span class="co">// function Empty() {}</span>


<span class="kw">var</span> x1 = <span class="kw">new</span> <span class="fu">fn1</span>();
<span class="ot">x1</span>.<span class="fu">__proto__</span> === <span class="ot">fn1</span>.<span class="fu">prototype</span>  <span class="co">// True</span>

<span class="ot">x1</span>.<span class="fu">__proto__</span>           <span class="co">// Object { constructor: function () { this.name = &quot;fn1&quot;; }</span>
                       <span class="co">//        , __proto__: Object }</span>
<span class="ot">x1</span>.<span class="fu">constructor</span>         <span class="co">// function () { this.name = &quot;fn1&quot;; }</span>


<span class="ot">fn1</span>.<span class="fu">prototype</span> = {<span class="st">&#39;location&#39;</span>: <span class="st">&#39;sea&#39;</span>}

<span class="kw">var</span> y1 = <span class="kw">new</span> <span class="fu">fn1</span>();
<span class="ot">x1</span>.<span class="fu">__proto__</span> === <span class="ot">fn1</span>.<span class="fu">prototype</span>  <span class="co">// True</span>

<span class="ot">y1</span>.<span class="fu">__proto__</span>;          <span class="co">// Object { location: &quot;sea&quot;</span>
                       <span class="co">//        ,__proto__: Object }</span>
<span class="ot">y1</span>.<span class="fu">constructor</span>;        <span class="co">// function Object() { [native code] }</span>
</code></pre></td></tr></table>
<ul>
<li>Quiz: Why y1.constructor is not same as x1.constructor?</li>
</ul>
<h1 id="jquery.fn.init">JQuery.fn.init</h1>
<ul>
<li><code>jQuery</code> is declarated as</li>
</ul>
<pre class="sourceCode javascript"><code class="sourceCode javascript"><span class="kw">var</span> jQuery = <span class="kw">function</span>( selector, context ) {
		<span class="co">// The jQuery object is actually just the init constructor &#39;enhanced&#39;</span>
		<span class="kw">return</span> <span class="kw">new</span> <span class="ot">jQuery</span>.<span class="ot">fn</span>.<span class="fu">init</span>( selector, context, rootjQuery );
	},</code></pre>
<ul>
<li><code>jQuery.fn</code> is just a object as</li>
</ul>
<pre class="sourceCode javascript"><code class="sourceCode javascript"><span class="ot">jQuery</span>.<span class="fu">fn</span> = {
	<span class="dt">constructor</span>: jQuery,
	<span class="dt">init</span>: <span class="kw">function</span>( selector, context, rootjQuery ) {
		    <span class="kw">var</span> match, elem, ret, doc;
            ... ...
          },
    ... ... <span class="co">// many API declaration.</span>
}</code></pre>
<ul>
<li>Function chain</li>
</ul>
<p>Since <code>jQuery</code> is just a function, we are able to do with a selector like <code>jQuery('div.navigator').addClass('nav')</code>.</p>
<p>Actually in order to use jQuery API like <code>addClass</code>, there must exists following something which of cource can be found at around line 322 of jQuery.1.7.1.css<a href="#fn4" class="footnoteRef" id="fnref4"><sup>4</sup></a>.</p>
<pre class="sourceCode javascript"><code class="sourceCode javascript"><span class="ot">jQuery</span>.<span class="ot">fn</span>.<span class="ot">init</span>.<span class="fu">prototype</span> = <span class="ot">jQuery</span>.<span class="fu">fn</span>;</code></pre>
<div class="footnotes">
<hr />
<ol>
<li id="fn1"><p><a href="http://stackoverflow.com/questions/1646698/what-is-the-new-keyword-in-javascript">What is new keyword in JS</a><a href="#fnref1">↩</a></p></li>
<li id="fn2"><p><a href="http://joost.zeekat.nl/constructors-considered-mildly-confusing.html">Constructors considered confusing</a><a href="#fnref2">↩</a></p></li>
<li id="fn3"><p><a href="http://www.ecma-international.org/publications/standards/Ecma-262.htm">Ecma262</a><a href="#fnref3">↩</a></p></li>
<li id="fn4"><p><a href="http://code.jquery.com/jquery-1.7.2.js">jQuery 1.7.1</a><a href="#fnref4">↩</a></p></li>
</ol>
</div>]]></description>
    <pubDate>Thu, 12 Apr 2012 00:00:00 UT</pubDate>
    <guid>http://freizl.github.io//posts/2012-04-12-confused-constructor-js.html</guid>
</item>
<item>
    <title>Quotes: Rework</title>
    <link>http://freizl.github.io//posts/2012-04-08-quotes-rework.html</link>
    <description><![CDATA[
<h1 id="quotes">Quotes</h1>
<ul>
<li>Draw a line in the sand</li>
<li>Build half a product, not a half-assed product</li>
<li>Start at the epicenter</li>
<li>You want to get into the rhythm of making choices</li>
<li>Be a curator</li>
<li>Lavish furniture</li>
<li>Distraction</li>
<li>You day is under siege by interruptions</li>
<li>Don’t try to sweep it under the rug</li>
<li>Inspiration is perishable</li>
<li>Ideas are immortal</li>
<li>(need, can’t, must, easy, just, only, fast) Those words get in the way of healthy communication.</li>
</ul>
<h1 id="reference">Reference</h1>
<ul>
<li><a href="http://37signals.com/rework/">Rework</a></li>
</ul>]]></description>
    <pubDate>Sun, 08 Apr 2012 00:00:00 UT</pubDate>
    <guid>http://freizl.github.io//posts/2012-04-08-quotes-rework.html</guid>
</item>
<item>
    <title>Notes: ProGit</title>
    <link>http://freizl.github.io//posts/2012-04-08-notes-progit.html</link>
    <description><![CDATA[
<h1 id="chapter-9.3">Chapter 9.3</h1>
<ul>
<li>refs</li>
<li>refs/heads</li>
<li>refs/tags</li>
</ul>
<pre class="sh"><code>[remote &quot;origin&quot;]
    url = ...
    fetch = +refs/heads/* : refs/remotes/origin/*
      ===&gt; fetch all the references under &quot;refs/heads&quot; on the server
           and writes them to refs/remotes/origin locally</code></pre>
<p><em>Questions</em></p>
<ol style="list-style-type: decimal">
<li>What does ‘git branch B_NAME’ actually do?</li>
<li>What happened to HEAD when switching branch?</li>
</ol>
<h1 id="chapter-6">Chapter 6</h1>
<pre class="sh"><code>git add -i</code></pre>
<pre class="sh"><code>###
### revision selection
### ^ ::= parent of something, only two format ^ and ^2
git log HEAD^2
git log d107aoeu^2
git log HEAD~3</code></pre>
<pre class="sh"><code>git log master..branchA
git log origin/master..HEAD
git log branchA branchB ^branchC
git log master...branchA</code></pre>
<h1 id="internal">Internal</h1>
<p>Questions</p>
<div class="figure">
<img src="http://freizl.github.com/images/git_internal.png" alt="Git internal in one image" />
<p class="caption">Git internal in one image</p>
</div>
<h1 id="reference">Reference</h1>
<ul>
<li><a href="http://progit.org/book/">ProGit</a></li>
</ul>]]></description>
    <pubDate>Sun, 08 Apr 2012 00:00:00 UT</pubDate>
    <guid>http://freizl.github.io//posts/2012-04-08-notes-progit.html</guid>
</item>
<item>
    <title>Notes: Master of Regular Expression</title>
    <link>http://freizl.github.io//posts/2012-04-08-notes-master-regexp.html</link>
    <description><![CDATA[
<h1 id="notes">Notes</h1>
<pre class="sourceCode perl"><code class="sourceCode perl">Matching <span class="kw">and</span> Capture, <span class="kw">or</span> just <span class="kw">not</span> Capture
(?:...) <span class="kw">and</span> (...)


<span class="kw">/</span><span class="ot">i has no effect on the replacement text</span>
<span class="ot">e.g.  </span><span class="dt">$var</span><span class="ot"> =~ s</span><span class="kw">/</span>\bJeff\b/Jeff/i;
compare difference with:
<span class="dt">$var</span> =~ <span class="kw">s/</span><span class="bn">\s</span><span class="ot">Jeff</span><span class="bn">\s</span><span class="kw">/</span><span class="st">Jeff</span><span class="kw">/i</span>;


Automated Editing
perl <span class="kw">-p</span> -i <span class="kw">-e</span> <span class="kw">&#39;</span><span class="st">s/sysread/read/g</span><span class="kw">&#39;</span> file


? What is <span class="kw">&#39;</span><span class="st">m</span><span class="kw">&#39;</span> modifier
<span class="dt">$text</span> =~ <span class="kw">s/</span><span class="ch">^$</span><span class="kw">/</span><span class="st">&lt;p&gt;</span><span class="kw">/mg</span>;</code></pre>
<pre class="sourceCode perl"><code class="sourceCode perl">Lookaround
  (?= ...) (?! ...) (?&lt;= ...) (?&lt;! ...)
  - lookaround does <span class="kw">not</span> consume text
  - (?=Jeffery)Jeff <span class="kw">&lt;P61&gt;</span>
  - (?&lt;=\bJeff)(?=<span class="kw">s\</span><span class="ot">b</span><span class="ch">)</span>


<span class="kw">\</span><span class="st">G &lt;P128&gt;</span>
<span class="st">  X? ...</span>

<span class="st">Comments and Mode modifiers &lt;P133&gt;</span>
<span class="st">  (?modifier) such as (?i), (?-i)</span>
<span class="st">  e.g. &lt;B&gt;(?i)very(?-i)&lt;/B&gt;</span>
<span class="st">       match: &lt;B&gt;VERY&lt;/B&gt;</span>
<span class="st">              &lt;B&gt;Very&lt;/B&gt;</span>
<span class="st">       but not: &lt;b&gt;Very&lt;/b&gt;</span>
<span class="st">  (?modifier:), (?i: ...)</span>


<span class="st">Named Capture &lt;P137&gt;</span>
<span class="st">Atomic grouping</span>
<span class="st">  (?&gt; ...)</span>

<span class="st">Class set opertions &lt;P123&gt;</span>
<span class="st">  [[a-z]&amp;&amp;[^aeiou]]</span>
<span class="st">  &quot;this and not that&quot;</span>

<span class="st">Greedy quantifiers &lt;P139&gt;</span>
<span class="st">Lazy (Non-Greedy) quantifiers</span></code></pre>
<pre class="sourceCode perl"><code class="sourceCode perl">quiz
where does fat|cat|belly|you match in the string
 <span class="kw">&quot;</span><span class="st">The dragging belly indicates your cat is too fat</span><span class="kw">&quot;</span>

Apply ^.*([<span class="dv">0-9</span>]+) to <span class="kw">&quot;</span><span class="st">Copyright 2003</span><span class="kw">&quot;</span>,
 what<span class="kw">&#39;</span><span class="st">s captured by parentheses?</span></code></pre>
<pre class="sourceCode perl"><code class="sourceCode perl"><span class="co">### &quot;look around&quot;</span>
<span class="dt">$test</span> = <span class="kw">&quot;</span><span class="st">see Jeffs book</span><span class="kw">&quot;</span>;
<span class="dt">$test</span> =~ <span class="kw">s/</span><span class="ch">(?&lt;=</span><span class="ot">Jeff</span><span class="ch">)(?=</span><span class="ot">s</span><span class="ch">)</span><span class="kw">/</span><span class="st">&#39;</span><span class="kw">/g</span>;
<span class="fu">print</span> <span class="kw">&quot;</span><span class="dt">$test</span><span class="st"> </span><span class="ch">\n</span><span class="kw">&quot;</span>;    <span class="co">### expect see Jeff&#39;s book</span>

<span class="co">### Start of match ( or end of previous match): \G</span>
<span class="dt">$test</span> = <span class="kw">&quot;</span><span class="st">abcde</span><span class="kw">&quot;</span>;
<span class="dt">$test</span> =~ <span class="kw">s/</span><span class="ch">\G</span><span class="ot">x</span><span class="ch">?</span><span class="kw">/</span><span class="st">!</span><span class="kw">/g</span>;
<span class="fu">print</span> <span class="kw">&quot;</span><span class="dt">$test</span><span class="st"> </span><span class="ch">\n</span><span class="kw">&quot;</span>;             <span class="co">### expect !abcde</span>
<span class="dt">$test</span> =~ <span class="kw">s/</span><span class="ot">\x</span><span class="ch">?</span><span class="kw">/</span><span class="st">!</span><span class="kw">/g</span>;
<span class="fu">print</span> <span class="kw">&quot;</span><span class="dt">$test</span><span class="st"> </span><span class="ch">\n</span><span class="kw">&quot;</span>;             <span class="co">### expect !a!b!c!d!e</span></code></pre>
<h1 id="reference">Reference</h1>]]></description>
    <pubDate>Sun, 08 Apr 2012 00:00:00 UT</pubDate>
    <guid>http://freizl.github.io//posts/2012-04-08-notes-master-regexp.html</guid>
</item>
<item>
    <title>Magic Monad Transformer</title>
    <link>http://freizl.github.io//posts/2012-04-07-magic-monad-transformer.html</link>
    <description><![CDATA[
<h1 id="monad-transformer">Monad-Transformer</h1>
<p>The code fragment below is from chapter 18 Monad Transform of &lt;Real World Haskell&gt;<a href="#fn1" class="footnoteRef" id="fnref1"><sup>1</sup></a>.</p>
<p>When the first time I read this example, I was confused with how it is possible to use <code>ask</code> of <code>MonadReader</code> (line 6) and <code>get</code> of <code>MonadState</code> (line 13) functions in the same <code>App</code> Monad content.</p>
<p>The only reasonable explanation is that <code>App</code> is both <code>MonadReader</code> and <code>MonadState</code>. While looking at <code>App</code> type definition (line 1), seems it is not possible.</p>
<table class="sourceCode haskell numberLines"><tr class="sourceCode"><td class="lineNumbers"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
</pre></td><td class="sourceCode"><pre><code class="sourceCode haskell"><span class="kw">type</span> <span class="dt">App</span> <span class="fu">=</span> <span class="dt">ReaderT</span> <span class="dt">AppConfig</span> (<span class="dt">StateT</span> <span class="dt">AppState</span> <span class="dt">IO</span>)

<span class="ot">constrainedCount ::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> FilePath <span class="ot">-&gt;</span> <span class="dt">App</span> [(FilePath, <span class="dt">Int</span>)]
constrainedCount curDepth path <span class="fu">=</span> <span class="kw">do</span>
  contents <span class="ot">&lt;-</span> liftIO <span class="fu">.</span> listDirectory <span class="fu">$</span> path
  cfg <span class="ot">&lt;-</span> ask
  rest <span class="ot">&lt;-</span> forM contents <span class="fu">$</span> \name <span class="ot">-&gt;</span> <span class="kw">do</span>
            <span class="kw">let</span> newPath <span class="fu">=</span> path <span class="fu">&lt;/&gt;</span> name
            isDir <span class="ot">&lt;-</span> liftIO <span class="fu">$</span> doesDirectoryExist newPath
            <span class="kw">if</span> isDir <span class="fu">&amp;&amp;</span> curDepth <span class="fu">&lt;</span> cfgMaxDepth cfg
              <span class="kw">then</span> <span class="kw">do</span>
                <span class="kw">let</span> newDepth <span class="fu">=</span> curDepth <span class="fu">+</span> <span class="dv">1</span>
                st <span class="ot">&lt;-</span> get
                when (stDeepestReached st <span class="fu">&lt;</span> newDepth) <span class="fu">$</span>
                  put st { stDeepestReached <span class="fu">=</span> newDepth }
                constrainedCount newDepth newPath
              <span class="kw">else</span> return []
  return <span class="fu">$</span> (path, length contents) <span class="fu">:</span> concat rest</code></pre></td></tr></table>
<h1 id="what-is-the-so-called-magic">What is the so-called “Magic”</h1>
<p>I turn to the source of package mtl<a href="#fn2" class="footnoteRef" id="fnref2"><sup>2</sup></a> and finding following implementations.</p>
<table class="sourceCode haskell numberLines"><tr class="sourceCode"><td class="lineNumbers"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="sourceCode"><pre><code class="sourceCode haskell">
<span class="co">-- | ReaderT</span>
<span class="kw">instance</span> (<span class="dt">Monad</span> m) <span class="ot">=&gt;</span> <span class="dt">MonadReader</span> r (<span class="dt">ReaderT</span> r m) <span class="kw">where</span>
    ask <span class="fu">=</span> ReaderT.ask
    local <span class="fu">=</span> ReaderT.local

<span class="co">-- | StateT</span>
<span class="kw">instance</span> (<span class="dt">Monad</span> m) <span class="ot">=&gt;</span> <span class="dt">MonadState</span> s (<span class="dt">Lazy.StateT</span> s m) <span class="kw">where</span>
    get <span class="fu">=</span> Lazy.get
    put <span class="fu">=</span> Lazy.put

<span class="co">-- | Combine ReaderT and StataT</span>
<span class="kw">instance</span> (<span class="dt">MonadState</span> s m) <span class="ot">=&gt;</span> <span class="dt">MonadState</span> s (<span class="dt">ReaderT</span> r m) <span class="kw">where</span>
    get <span class="fu">=</span> lift get
    put <span class="fu">=</span> lift <span class="fu">.</span> put</code></pre></td></tr></table>
<p>If we do a substitution, will get</p>
<pre><code>1. instance MonadReader AppConfig App where ...

2. instance (MonadState AppState (StateT AppState IO)
          =&gt; MonadState AppState (ReaderT AppConfig (StateT AppState IO)) where ...
   ~&gt; instance MonadState AppState App where ...</code></pre>
<p>Therefore <code>App</code> is both MonadReader and MonadState.</p>
<h1 id="a-trivial-demo">A trivial demo</h1>
<p>I made a very trivial sample <a href="#fn3" class="footnoteRef" id="fnref3"><sup>3</sup></a> demostrating combine ReaderT and StateT.</p>
<div class="footnotes">
<hr />
<ol>
<li id="fn1"><p><a href="http://book.realworldhaskell.org/read/monad-transformers.html">Chapter 8 Monad Transformer</a><a href="#fnref1">↩</a></p></li>
<li id="fn2"><p><a href="http://hackage.haskell.org/package/mtl-2.0.1.0">mtl-2.0.1.0 in hackage</a><a href="#fnref2">↩</a></p></li>
<li id="fn3"><p><a href="https://github.com/freizl/dive-into-haskell/blob/master/monad/hello-mtl.hs">A clear demo</a><a href="#fnref3">↩</a></p></li>
</ol>
</div>]]></description>
    <pubDate>Sat, 07 Apr 2012 00:00:00 UT</pubDate>
    <guid>http://freizl.github.io//posts/2012-04-07-magic-monad-transformer.html</guid>
</item>
<item>
    <title>Shell Tips</title>
    <link>http://freizl.github.io//posts/2012-04-06-shell-tips.html</link>
    <description><![CDATA[
<h1 id="quicklinks">Quicklinks</h1>
<ul>
<li>[[http://bash.cyberciti.biz/guide/What_is_a_Subshell%3F][What is a Subshell]]</li>
<li>[[http://en.wikipedia.org/wiki/List_of_Unix_utilities][List of Unix utilities]]</li>
<li>[[http://www-128.ibm.com/developerworks/aix/library/au-badunixhabits.html?ca=lnxw01GoodUnixHabits][10 Good Unix habits]]</li>
</ul>
<h1 id="reference">Reference</h1>
<ul>
<li>() execute command in subshell</li>
<li>{} execute command in currecnt shell Usage is same with () expect the final command in the list ends with a semicolon.</li>
</ul>
<h1 id="sample-section-a">Sample Section A</h1>
<h2 id="grep">grep</h2>
<pre class="sh"><code>grep -Elr --include=*.xsd --exclude-dir={branches,tags} VendorDesc.xsd $DIRECTORY
### count process and exclude grep itself
ps aux | grep vpnc | grep -v grep -c</code></pre>
<h2 id="find">find</h2>
<pre class="sh"><code>find ${1} \( -name Consume*wsdl -o -name Produce*wsdl \) -path *trunk*
find $update_dir \( -name &#39;*.java&#39; \) \( -path &#39;**/source/**&#39; -o -path &#39;**/test/**&#39; -o -path &#39;**/resource/**&#39; \)</code></pre>
<h2 id="awk">awk</h2>
<pre class="sh"><code>### list all time of each ping
awk -F&quot;=&quot; &#39;/time=/ {print substr($4,0,length($4)-3) }&#39; &lt; ping.log
### passing shell parameter to awk scripts
svn st ${dirs} | awk -F&quot; &quot; -v ac=&quot;${*}&quot; &#39; /&#39;${predicate}&#39;/ &amp;&amp; (index($2,&quot;\\&quot;)==0 || gsub(/\\/,&quot;/&quot;,$2)) {print ac, $2}&#39;
### change Output Row Separator
awk &#39; BEGIN { ORS = &quot; &quot; } { print }&#39;</code></pre>
<h2 id="sed">sed</h2>
<pre class="sh"><code>ll | sed &#39;/Stores\|Test\|^-\|^t/d&#39; | wc
smbclient -L \\\\hangzhou2\\twitters -U foobar | sed &#39;/Hangzhou20/,$d&#39;
export BEA_IP=`/sbin/ifconfig eth0 | sed &#39;/inet addr/!d;s/.*addr:\([^ ]\+\).*/\1/g&#39;`</code></pre>
<h2 id="cp">cp</h2>
<pre class="sh"><code>cp filename{,.bak}</code></pre>
<h1 id="sample-section-b">Sample Section B</h1>
<h2 id="while">while</h2>
<pre class="sh"><code>while getopts &quot;:ab:c&quot; opt; do
	case $opt in
	a ) echo &quot;I am a&quot; ;;
	b ) echo $OPTARG  ;;
	c ) echo &quot;i am c&quot; ;;
	? ) echo &quot;usage : $0 [-a] [-b barg] [-c] args ..&quot;
	    exit 1 ;;
	esac
    shift $(($OPTIND - 1))
done</code></pre>
<h2 id="for">for</h2>
<pre class="sh"><code>for s in $(echo $string | sed &quot;s/;/ /g&quot;); do
	echo $s
done</code></pre>
<pre class="sh"><code>for (( i=1; i&lt;=$n; i++ )) do
   ls -1 &quot;${file_pattern}&quot; | sed &#39;s#\(.*\)\(.xml\).bak#cp &amp; \1&#39;&quot;_$i&quot;&#39;\2#g&#39;
done</code></pre>
<h2 id="case">case</h2>
<pre class="sh"><code>case $action in
    backup ) tar cfj &quot;$backup_dir/$bakfile&quot; * --exclude &quot;jobs/*/workspace&quot; ;;
    rest | restore ) tar xfj $backup_dir/$bakfile ;;
    * ) echo &quot;all supported actions: backup | rest[ore]&quot; ; exit 0 ;;
esac</code></pre>]]></description>
    <pubDate>Fri, 06 Apr 2012 00:00:00 UT</pubDate>
    <guid>http://freizl.github.io//posts/2012-04-06-shell-tips.html</guid>
</item>
<item>
    <title>Python Tips</title>
    <link>http://freizl.github.io//posts/2012-04-06-python-tips.html</link>
    <description><![CDATA[
<h1 id="re">re</h1>
<pre class="sourceCode python"><code class="sourceCode python">&gt;&gt;&gt; re.split(<span class="st">&quot;[^0-9]&quot;</span>, <span class="st">&quot;12 34 + 2 *&quot;</span>)
[<span class="st">&#39;12&#39;</span>, <span class="st">&#39;34&#39;</span>, <span class="st">&#39;&#39;</span>, <span class="st">&#39;&#39;</span>, <span class="st">&#39;2&#39;</span>, <span class="st">&#39;&#39;</span>, <span class="st">&#39;&#39;</span>]</code></pre>
<p>Cant understand how ’’ being produced.</p>
<h1 id="list">list</h1>
<pre class="sourceCode python"><code class="sourceCode python"><span class="dt">str</span>(<span class="st">&quot;abcdef&quot;</span>)[::-<span class="dv">1</span>] ==&gt; <span class="st">&quot;fedcba&quot;</span>
<span class="dt">reduce</span>(<span class="kw">lambda</span> x,y:y+x,<span class="st">&quot;abcdef&quot;</span>) ==&gt; <span class="st">&quot;fedcba&quot;</span>
<span class="dt">sorted</span>([<span class="dv">1</span>,<span class="dv">5</span>,<span class="dv">3</span>,<span class="dv">2</span>]) ==&gt; [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">5</span>]
a = [<span class="dv">1</span>,<span class="dv">5</span>,<span class="dv">3</span>,<span class="dv">2</span>]; a.sort() ==&gt; a := [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">5</span>]</code></pre>
<h1 id="dict">dict</h1>
<pre class="sourceCode python"><code class="sourceCode python"><span class="co">### demostrate loop a dict and list/dict parameter</span>
<span class="kw">def</span> tst_dict(*args, **kargs):
    <span class="kw">for</span> k, v in <span class="dt">dict</span>(*args, **kargs).iteritems():
        <span class="dt">print</span> k, v

<span class="kw">def</span> tst_dict2():
    <span class="kw">for</span> key in a_dict:
        <span class="dt">print</span> key, a_dict[key]

tst_dict(name=<span class="st">&#39;aa&#39;</span>, place=<span class="st">&#39;bb&#39;</span>)
tst_dict(<span class="st">&#39;aaa&#39;</span>, <span class="st">&#39;bbb&#39;</span>) <span class="co"># throw error</span></code></pre>
<h1 id="mise">Mise</h1>
<pre class="sourceCode python"><code class="sourceCode python"><span class="dt">range</span>(<span class="dv">4</span>) ==&gt; [<span class="dv">0</span>,<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>] <span class="co">#range start from 0 by default</span>
<span class="co">&#39;%s: %r&#39;</span> % (something, other)
<span class="co">&#39;%(name)s is %(value)d&#39;</span> % {
    <span class="st">&#39;name&#39;</span>: <span class="st">&#39;The answer&#39;</span>,
    <span class="co">&#39;value&#39;</span>: <span class="dv">42</span>,
}</code></pre>
<h1 id="reference">Reference</h1>
<ul>
<li><a href="http://docs.python.org/library/re.html">re reference</a></li>
</ul>]]></description>
    <pubDate>Fri, 06 Apr 2012 00:00:00 UT</pubDate>
    <guid>http://freizl.github.io//posts/2012-04-06-python-tips.html</guid>
</item>
<item>
    <title>Perl Tips</title>
    <link>http://freizl.github.io//posts/2012-04-06-perl-tips.html</link>
    <description><![CDATA[
<h1 id="basic">Basic</h1>
<pre class="sourceCode perl"><code class="sourceCode perl"><span class="kw">my</span> <span class="dt">@myarray</span> = ();
<span class="fu">push</span> <span class="dt">@myarray</span>,<span class="kw">&quot;</span><span class="st">a</span><span class="kw">&quot;</span>;</code></pre>
<pre class="sourceCode perl"><code class="sourceCode perl"><span class="kw">my</span> <span class="dt">@keys</span> = <span class="kw">qw(</span>a b c<span class="kw">)</span>;
<span class="kw">my</span> <span class="dt">@vals</span> = (<span class="dv">1</span>, <span class="dv">2</span>, <span class="dv">3</span>);
<span class="kw">my</span> <span class="dt">%hash</span>;
<span class="dt">@hash</span>{<span class="dt">@keys</span>} = <span class="dt">@vals</span>;</code></pre>
<h1 id="loop">Loop</h1>
<pre class="sourceCode perl"><code class="sourceCode perl"><span class="co"># loop elements in itemArray1 and itemArray2</span>
<span class="kw">foreach</span> <span class="kw">my</span> <span class="dt">$item</span> (<span class="dt">@itemArray1</span>, <span class="dt">@itemArray2</span>) {
  ...
}

<span class="kw">while</span> ( <span class="kw">my</span> (<span class="dt">$key</span>, <span class="dt">$value</span>) = <span class="kw">each</span>(<span class="dt">%hash</span>) ) {
  <span class="fu">print</span> <span class="kw">&quot;</span><span class="dt">$key</span><span class="st"> =&gt; </span><span class="dt">$value</span><span class="ch">\n</span><span class="kw">&quot;</span>;
}</code></pre>
<h1 id="sub">Sub</h1>
<pre class="sourceCode perl"><code class="sourceCode perl"><span class="kw">sub </span><span class="fu">prepare_sth</span> {
  <span class="kw">my</span> <span class="dt">$param</span> = <span class="fu">shift</span>;  <span class="co"># means shift @_, @_ is param array</span>
  <span class="co"># my $param = $_;   # when could use $_ ??</span>
}</code></pre>
<pre class="sourceCode perl"><code class="sourceCode perl"><span class="kw">sub </span><span class="fu">uniq</span> {
  <span class="dt">@list</span> = <span class="fu">shift</span>;
  <span class="dt">%seen</span> = ();
  <span class="dt">@uniqu</span> = <span class="fu">grep</span> { ! <span class="dt">$seen</span>{<span class="dt">$_</span>} ++ } <span class="dt">@list</span>;
}</code></pre>
<h1 id="data-structure">Data Structure</h1>
<h2 id="aoa">AoA</h2>
<p>from book <programming perl></p>
<pre class="sourceCode perl"><code class="sourceCode perl"><span class="co">### Assign a list of array references to an array.</span>
<span class="dt">@AoA</span> = (
         [ <span class="kw">&quot;</span><span class="st">fred</span><span class="kw">&quot;</span>, <span class="kw">&quot;</span><span class="st">barney</span><span class="kw">&quot;</span> ],
         [ <span class="kw">&quot;</span><span class="st">george</span><span class="kw">&quot;</span>, <span class="kw">&quot;</span><span class="st">jane</span><span class="kw">&quot;</span>, <span class="kw">&quot;</span><span class="st">elroy</span><span class="kw">&quot;</span> ],
         [ <span class="kw">&quot;</span><span class="st">homer</span><span class="kw">&quot;</span>, <span class="kw">&quot;</span><span class="st">marge</span><span class="kw">&quot;</span>, <span class="kw">&quot;</span><span class="st">bart</span><span class="kw">&quot;</span> ],
);
<span class="fu">print</span> <span class="dt">$AoA</span>[<span class="dv">2</span>][<span class="dv">1</span>];   <span class="co"># prints &quot;marge&quot;</span>

<span class="co">### Create an reference to an array of array references.</span>
<span class="dt">$ref_to_AoA</span> = [
    [ <span class="kw">&quot;</span><span class="st">fred</span><span class="kw">&quot;</span>, <span class="kw">&quot;</span><span class="st">barney</span><span class="kw">&quot;</span>, <span class="kw">&quot;</span><span class="st">pebbles</span><span class="kw">&quot;</span>, <span class="kw">&quot;</span><span class="st">bamm bamm</span><span class="kw">&quot;</span>, <span class="kw">&quot;</span><span class="st">dino</span><span class="kw">&quot;</span>, ],
    [ <span class="kw">&quot;</span><span class="st">homer</span><span class="kw">&quot;</span>, <span class="kw">&quot;</span><span class="st">bart</span><span class="kw">&quot;</span>, <span class="kw">&quot;</span><span class="st">marge</span><span class="kw">&quot;</span>, <span class="kw">&quot;</span><span class="st">maggie</span><span class="kw">&quot;</span>, ],
    [ <span class="kw">&quot;</span><span class="st">george</span><span class="kw">&quot;</span>, <span class="kw">&quot;</span><span class="st">jane</span><span class="kw">&quot;</span>, <span class="kw">&quot;</span><span class="st">elroy</span><span class="kw">&quot;</span>, <span class="kw">&quot;</span><span class="st">judy</span><span class="kw">&quot;</span>, ],
];

<span class="fu">print</span> <span class="dt">$ref_to_AoA</span>-&gt;[<span class="dv">2</span>][<span class="dv">3</span>];   <span class="co"># prints &quot;judy&quot;</span></code></pre>
<p>Remember that there is an implied -&gt; between every pair of adjacent braces or brackets. <strong>(Simply saying, -&gt; indicates a reference which created via [])</strong>.</p>
<p>Therefore these two lines:</p>
<pre class="sourceCode perl"><code class="sourceCode perl"><span class="dt">$AoA</span>[<span class="dv">2</span>][<span class="dv">3</span>]
<span class="dt">$ref_to_AoA</span>-&gt;[<span class="dv">2</span>][<span class="dv">3</span>]</code></pre>
<p>are equivalent to these two lines:</p>
<pre class="sourceCode perl"><code class="sourceCode perl"><span class="dt">$AoA</span>[<span class="dv">2</span>]-&gt;[<span class="dv">3</span>]
<span class="dt">$ref_to_AoA</span>-&gt;[<span class="dv">2</span>]-&gt;[<span class="dv">3</span>]</code></pre>
<h1 id="references">References</h1>
<ul>
<li><a href="http://www.cs.mcgill.ca/~abatko/computers/programming/perl/howto/hash/">Perl Hash Howto</a></li>
</ul>]]></description>
    <pubDate>Fri, 06 Apr 2012 00:00:00 UT</pubDate>
    <guid>http://freizl.github.io//posts/2012-04-06-perl-tips.html</guid>
</item>
<item>
    <title>Git Tips</title>
    <link>http://freizl.github.io//posts/2012-04-06-git-tips.html</link>
    <description><![CDATA[
<h1 id="fetch">fetch</h1>
<pre><code>### fetch origin &quot;FROM&quot; : &quot;TO&quot;
fetch = +refs/heads/master:refs/remotes/origin/master

git fetch origin master:refs/remotes/origin/mymaster
git fetch origin master:refs/remotes/origin/mymaster
          topic:refs/remotes/origin/topic</code></pre>
<h1 id="one-commit">one commit</h1>
<p><a href="/docs/git_one_commit.pdf">What happened after one commit</a></p>
<h1 id="log">log</h1>
<h1 id="miscs">miscs</h1>
<pre><code>git instaweb --httpd=lighttpd

### anything need push
git remote show origin

### init new repos
git clone --bare my_project my_project.git

git reset --hard 7e83

git checkout 82f5 [-b branch_name]	This takes you back in time, while preserving newer commits.
git checkout :/&quot;my first brach&quot;	        Jump to the commit that starts with a given message.
git checkout master~5	                5th last saved state.(BRANCH_NAME~number)

git whatchanged
git cherry-pick

git rebase
git rebase -I HEAD~10	modify last 10 commits
git commit --amend

git filter-branch --tree-filter &#39;rm top/sececre/file&#39; HEAD	remove file from all commit

git bundle

git branch -r

###diff with remote branch,a.k. what are local change
git diff remotes/HEAD

git reflog
</code></pre>]]></description>
    <pubDate>Fri, 06 Apr 2012 00:00:00 UT</pubDate>
    <guid>http://freizl.github.io//posts/2012-04-06-git-tips.html</guid>
</item>
<item>
    <title>Git SVN</title>
    <link>http://freizl.github.io//posts/2012-04-06-git-svn.html</link>
    <description><![CDATA[
<h1 id="git-svn-initfetch">git svn init/fetch</h1>
<pre><code>git svn init [-s] URL
git svn fetch -r xxx|HEAD
  a) it gets out &#39;all&#39; branches/tags/trunk when no specific -r
  b) by change some at branch, chdir to branches folder and play with git
  c) if specify with -r, means &quot;Just want to checkout that revision&quot;
                         then try git svn rebase to update to HEAD
git svn rebase
</code></pre>
<h1 id="git-svn-clone">git svn clone</h1>
<pre><code># if any problems with init/fetch, just clone and seems this is recommanded...
# seem should no targe name specified after URL
# verify with git branch -r should show all svn branches and tags
git svn clone [URL]</code></pre>
<h1 id="git-svn-branch">git svn branch</h1>
<pre><code># create svn branch
git svn branch [svn_branch_1]

# set up local branch to dcommit to svn branch
git branch [local_branch_name] remotes/svn_branch_name

# do change at git local branch and merge into master with
git merge --squash
git commit
git svn dcommit</code></pre>
<h1 id="alternative-with-svn-merge">alternative with svn merge</h1>
<pre><code>svn mergeinfo ... :
  git log master..branchx (diff commits that in branchx but master)
  git branch [--no-merged|--merged]

svn merge --dry-run
  git merge --no-commit --no-ff
</code></pre>]]></description>
    <pubDate>Fri, 06 Apr 2012 00:00:00 UT</pubDate>
    <guid>http://freizl.github.io//posts/2012-04-06-git-svn.html</guid>
</item>
<item>
    <title>Expression and Statement</title>
    <link>http://freizl.github.io//posts/2012-04-06-expression-and-statement.html</link>
    <description><![CDATA[
<h1 id="expression">Expression</h1>
<p>Something which evaluates to a value. Example:</p>
<pre><code>1 + 2/x</code></pre>
<h1 id="statement">Statement</h1>
<p>A line of code which does something. Example:</p>
<pre><code>a = 1 + a;
return 10;</code></pre>
<h1 id="reference">Reference</h1>
<ul>
<li><a href="http://stackoverflow.com/questions/19132/expression-versus-statement">Discussion at Stackoverflow</a></li>
<li><a href="http://en.wikipedia.org/wiki/Statement_%28programming%29">Statement</a></li>
<li><a href="http://en.wikipedia.org/wiki/Expression_%28programming%29">Expression</a></li>
</ul>]]></description>
    <pubDate>Fri, 06 Apr 2012 00:00:00 UT</pubDate>
    <guid>http://freizl.github.io//posts/2012-04-06-expression-and-statement.html</guid>
</item>
<item>
    <title>Export a OrgMode doc in Chinese to PDF</title>
    <link>http://freizl.github.io//posts/2012-04-06-export-orgmode-file-in-Chinese.html</link>
    <description><![CDATA[
<h1 id="introduction">Introduction</h1>
<p>OrgMode is really cool and export context to latex then processed to PDF is quite straightforwards. However when working with Chinese characters, I need additional packages.</p>
<p>First of all, install the following packages. (I already install the texlive package)</p>
<pre><code>apt-get install latex-cjk-chinese latex-cjk-xcjk texlive-xetex</code></pre>
<h1 id="first-solution">First solution</h1>
<p>Then in the org file, add the following latex options.</p>
<pre><code>#+LaTeX_HEADER: \usepackage{CJK}
#+LaTeX_HEADER: \begin{CJK}{UTF8}{gbsn}</code></pre>
<p>A littel drawback here is the <code>\begin{CJK}</code> is added as a header option whice due to it will not be closed when I checked with the tex output.</p>
<p>People suggest to change to <code>#+LaTeX: \begin{CJK}{UTF8}{gbsn}</code> and append <code>#+LaTex: \end{CJK}</code> to the end of document.</p>
<p>It all works out OK except the title which is Chinese characters as well can not display at all.</p>
<h1 id="second-solution">Second solution</h1>
<p>Well, it is XeLaTex which has better support for UTF8. Actually I did not figure how to make it work with orgmode until a guy from orgmode mail list point out [[http://thread.gmane.org/gmane.emacs.orgmode/51914][another thread]].</p>
<p>All I need to do is adding following option to the org document.</p>
<pre><code>#+LATEX_HEADER: \usepackage{xltxtra}
#+LATEX_HEADER: \setmainfont{WenQuanYi Micro Hei}</code></pre>
<p>Also need to customize emacs latex to pdf process.</p>
<pre><code>(setq org-latex-to-pdf-process
      &#39;(&quot;xelatex -interaction nonstopmode -output-directory %o %f&quot;
        &quot;xelatex -interaction nonstopmode -output-directory %o %f&quot;
        &quot;xelatex -interaction nonstopmode -output-directory %o %f&quot;))</code></pre>
<p><strong>PS: The main font has been setted may be vary among different systems. How I find a proper font under ubuntu is via command <code>fc-list</code>.</strong></p>]]></description>
    <pubDate>Fri, 06 Apr 2012 00:00:00 UT</pubDate>
    <guid>http://freizl.github.io//posts/2012-04-06-export-orgmode-file-in-Chinese.html</guid>
</item>
<item>
    <title>Trivial bind examples in JavaScipts</title>
    <link>http://freizl.github.io//posts/2012-04-06-bind-examples-in-javascripts.html</link>
    <description><![CDATA[
<h1 id="defined-a-function">Defined a function</h1>
<pre class="javascripts"><code>var fn = function (x, y, z) {
  console.log(&quot;The value: &quot;, this.shangHai);
  console.log(&quot;The sum is: &quot;, x+y+z);
}</code></pre>
<h1 id="run-it">Run it</h1>
<pre class="javascripts"><code>fn(1);</code></pre>
<p>-&gt; Output</p>
<pre class="javascripts"><code>The value:  undefined
The sum is:  NaN</code></pre>
<pre class="javascripts"><code>fn(1,2,3);</code></pre>
<p>-&gt; Output:</p>
<pre class="javascripts"><code>The value:  undefined
The sum is:  6</code></pre>
<h1 id="run-it-with-bind">Run it with bind</h1>
<h2 id="less">Less</h2>
<pre class="javascripts"><code>fn.bind(null,1,2,3)</code></pre>
<p>-&gt; Output:</p>
<pre class="javascripts"><code>function () { [native code] }</code></pre>
<p>Hmm…, seems bind return a function rather apply the function and return value.</p>
<p>What will happen if invoke the new function?</p>
<pre class="javascripts"><code>fn.bind(null,1,2,3)()</code></pre>
<p>-&gt; Output:</p>
<pre class="javascripts"><code>The value:  undefined
The sum is:  6</code></pre>
<p>That is what we want.</p>
<h2 id="more">More</h2>
<p>What are results respectively of following expressions?</p>
<ul>
<li><code>fn.bind(null, 1)()</code></li>
<li><code>fn.bind(null, 1)(2)</code></li>
<li><code>fn.bind(null, 1, 2)()</code></li>
<li><code>fn.bind(null, 1, 2)(3)</code></li>
<li><code>fn.bind(null, 1).bind(null, 2)()</code></li>
<li><code>fn.bind(null, 1).bind(null, 2)(3)</code></li>
</ul>
<p>Take one example</p>
<pre class="javascripts"><code>fn.bind(null,1,2)(3)</code></pre>
<p>-&gt; Output:</p>
<pre class="javascripts"><code>The value:  undefined
The sum is:  6</code></pre>
<p>How it produce result 6?<br />Because <code>bind</code> return is actually a partially applied function of<code>fn</code>.</p>
<p>In JavaScripts words, the new function got return is a closure which holding 1st and 2nd parameters for function <code>fn</code> and ready to accept the third parameter in order to fully apply function <code>fn</code>.</p>
<p>The concept is named <em>Currying</em> and find more in <a href="#further">Further</a> section.</p>
<p><em>PS</em>: turns out that <code>bind</code> is not really doing Currying according to <a href="http://en.wikipedia.org/wiki/Currying">here</a> and <a href="http://www.uncarved.com/blog/not_currying.mrk">here</a>. It is Partially Function Application more than Currying thouht it can do Currying at some sense.</p>
<h1 id="run-with-bind-and-context">Run with bind and context</h1>
<p>What I really mean context here is actually about <code>this</code> used in the function. Still now, <em>this.shangHai</em> always output <code>undefined</code> but we would like it to mean something.</p>
<pre class="javascripts"><code>fn.bind({shangHai:&quot;lovely&quot;},1,2,3)();</code></pre>
<p>-&gt; Output:</p>
<pre class="javascripts"><code>The value:  lovely
The sum is:  6</code></pre>
<p>This time <code>this.shangHai</code> outputs “lovely” which obviously comes from the object that pass as first parameter of <code>bind</code>.</p>
<p>Generally speaking,<code>this</code> will be the object that pass in as the first parameter of bind when the object is not null.</p>
<p>Quiz: what <code>this</code> will be when passing null?</p>
<h1 id="diff-with-call-and-apply">Diff with call and apply</h1>
<p>My understanding the key point is bind return a function.</p>
<p>By contract, <code>call</code> and <code>apply</code> is all about providing another way for invoking a function.</p>
<h1 id="further">Further</h1>
<ul>
<li><a href="http://en.wikipedia.org/wiki/Currying">Currying</a></li>
</ul>]]></description>
    <pubDate>Fri, 06 Apr 2012 00:00:00 UT</pubDate>
    <guid>http://freizl.github.io//posts/2012-04-06-bind-examples-in-javascripts.html</guid>
</item>
<item>
    <title>Bayesian Network Exercise 01</title>
    <link>http://freizl.github.io//posts/2012-04-06-bayesian-network-exe01.html</link>
    <description><![CDATA[
<h1 id="introduction">Introduction</h1>
<p>AI Course Bayesian network excerice 01 resolution using enumeration method.</p>
<ul>
<li>C 国家政策</li>
<li>U 学校政策</li>
<li>W 工作压力</li>
<li>B 身体状况</li>
<li>D 过劳死</li>
</ul>
<h1 id="scenarios">Scenarios</h1>
<ul>
<li>已知 : <a href="http://docs.google.com/fileview?id=0B4ERhObEn4HSOTRlMDQwMGEtZDI4OS00M2ExLWI1YTgtNzU1MzdjYjU2Mzlm&amp;authkey=CMWuqBQ&amp;hl=en">Exercise01</a></li>
<li>求 : 当 学校政策＝＝True 而且 工作压力 == True 时, 过劳死的概率.</li>
</ul>
<h1 id="resolution">Resolution</h1>
<ul>
<li>Value T:0.95 means True case with probability 0.95</li>
<li>Probability of C is omitted as it is not related. Even include C, the result should be same.</li>
<li><p>Enumeration list</p>
<table>
<thead>
<tr class="header">
<th align="center">INDEX</th>
<th align="center"><em>U</em></th>
<th align="center"><em>W</em></th>
<th align="center"><em>B</em></th>
<th align="center"><em>D</em></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td align="center">1</td>
<td align="center">T:0.96</td>
<td align="center">T:0.90</td>
<td align="center">T:0.3</td>
<td align="center">T:0.335</td>
</tr>
<tr class="even">
<td align="center">2</td>
<td align="center">T:0.96</td>
<td align="center">T:0.90</td>
<td align="center">F:0.7</td>
<td align="center">T:0.3</td>
</tr>
<tr class="odd">
<td align="center">3</td>
<td align="center">T:0.96</td>
<td align="center">T:0.90</td>
<td align="center">T:0.3</td>
<td align="center">F:0.665</td>
</tr>
<tr class="even">
<td align="center">4</td>
<td align="center">T:0.06</td>
<td align="center">T:0.90</td>
<td align="center">F:0.7</td>
<td align="center">F:0.7</td>
</tr>
</tbody>
</table></li>
<li><p>Probability calculation</p></li>
</ul>
<pre class="sh"><code>P(D=T|U=T,W=T)
  = ( P(1) + P(2) ) / ( P(1) + P(2 )+ ... + P(4) )
  = (0.96*0.90*0.3*0.335 + 0.96*0.90*0.7*0.3 ) / (...)
  = 0.3 * 1.035 / (0.3 * 1.035 + 0.3 * 0.665 + 0.7 * 0.7)
  = 31.05%</code></pre>]]></description>
    <pubDate>Fri, 06 Apr 2012 00:00:00 UT</pubDate>
    <guid>http://freizl.github.io//posts/2012-04-06-bayesian-network-exe01.html</guid>
</item>
<item>
    <title>Quotes: A Century of Innovation - 3M</title>
    <link>http://freizl.github.io//posts/2012-01-13-quotes-3M-a-story.html</link>
    <description><![CDATA[
<h1 id="time-tested-truths">time-tested truths</h1>
<ul>
<li>Conceive, believe, achieve. Persistence—combined with creativity and faith—is still the best formula for long-term success.</li>
<li>Don’t let one approach or solution blind you to better options.</li>
<li>Struggle is a necessary component of success.</li>
<li>“Patient money” and patient people help the big ideas germinate.</li>
<li>Ask your customers what quality is—then never let the standard slip.</li>
<li>Give good people opportunities, supp ort them and watch them thrive.</li>
<li>Respect the “power of patents.”</li>
</ul>]]></description>
    <pubDate>Fri, 13 Jan 2012 00:00:00 UT</pubDate>
    <guid>http://freizl.github.io//posts/2012-01-13-quotes-3M-a-story.html</guid>
</item>
<item>
    <title>Lesson learned from Euler Problem 104</title>
    <link>http://freizl.github.io//posts/2011-12-15-euler-problem-104.html</link>
    <description><![CDATA[
<h1 id="solutions">Solutions</h1>
<p>There are two solutions below. One is written by me and another from haskell wiki.</p>
<p>They look quite similar and I can not figure out why the wiki solution can solve problem but not mine. (Actually mine take more than 15 minutes)</p>
<ul>
<li>My Solution</li>
</ul>
<table class="sourceCode haskell numberLines"><tr class="sourceCode"><td class="lineNumbers"><pre>1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="sourceCode"><pre><code class="sourceCode haskell">main <span class="fu">=</span> print <span class="fu">$</span> snd <span class="fu">$</span> head <span class="fu">$</span>
       dropWhile (\ (x,y) <span class="ot">-&gt;</span> (not <span class="fu">.</span> isLastNinePandigit <span class="st">&quot;123456789&quot;</span>) x)
                 (zip fibs [<span class="dv">1</span><span class="fu">..</span>])

bothNinePandigit digits n <span class="fu">=</span>  isFirstNinePandigit digits n
                             <span class="fu">&amp;&amp;</span> isLastNinePandigit digits n

isLastNinePandigit  digits <span class="fu">=</span> (<span class="fu">==</span> digits) <span class="fu">.</span> sort <span class="fu">.</span> lastDigits <span class="dv">9</span>
isFirstNinePandigit digits <span class="fu">=</span> (<span class="fu">==</span> digits) <span class="fu">.</span> sort <span class="fu">.</span> firstDigits <span class="dv">9</span>

firstDigits k n <span class="fu">=</span> take k (show n)
lastDigits  k n <span class="fu">=</span> show (n <span class="ot">`mod`</span> <span class="dv">10</span><span class="fu">^</span>k)</code></pre></td></tr></table>
<ul>
<li>Haskell Wiki solution<a href="#fn1" class="footnoteRef" id="fnref1"><sup>1</sup></a></li>
</ul>
<table class="sourceCode haskell numberLines"><tr class="sourceCode"><td class="lineNumbers"><pre>1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="sourceCode"><pre><code class="sourceCode haskell">
fibs <span class="fu">=</span> <span class="dv">1</span> <span class="fu">:</span> <span class="dv">1</span> <span class="fu">:</span> zipWith (<span class="fu">+</span>) fibs (tail fibs)

isFibPan n <span class="fu">=</span>
  <span class="kw">let</span> a <span class="fu">=</span> n <span class="ot">`mod`</span> <span class="dv">1000000000</span>
      b <span class="fu">=</span> sort (show a)
      c <span class="fu">=</span> sort <span class="fu">$</span> take <span class="dv">9</span> <span class="fu">$</span> show n
  <span class="kw">in</span>  b <span class="fu">==</span> <span class="st">&quot;123456789&quot;</span> <span class="fu">&amp;&amp;</span> c <span class="fu">==</span> <span class="st">&quot;123456789&quot;</span>

ex_104 <span class="fu">=</span> snd <span class="fu">$</span> head <span class="fu">$</span>
         dropWhile (\(x,y) <span class="ot">-&gt;</span> (not <span class="fu">.</span> isFibPan) x) (zip fibs [<span class="dv">1</span><span class="fu">..</span>])</code></pre></td></tr></table>
<h1 id="why-the-differences">Why the differences?</h1>
<p>The key point here is should test start nine digits first or test end nine digits.</p>
<p>Two concerns here:</p>
<ol style="list-style-type: decimal">
<li><code>show</code> function is (relatively) slow which used in test first 9 digits function.</li>
<li>quite few numbers are end in digits 1..9 in the first 329000 numbers</li>
</ol>
<p>Therefore test last 9 digits first make great performance improvement.</p>
<p><em>Thanks Brent<a href="#fn2" class="footnoteRef" id="fnref2"><sup>2</sup></a> explanation this sneaky thing very comprehensively in haskell-beginner.</em></p>
<h1 id="profiling">Profiling</h1>
<p>What help to identify is the GHC profiling tool.</p>
<p>Several options used here are</p>
<ul>
<li><p><strong>prof</strong>: for basic time and allocation profiling</p></li>
<li><p><strong>auto-all</strong>: auto insert cost centers on all top level functions. “cost center” is a location in the program like to collect statistics about and GHC will generate code to compute the cost of evalutating the expression at each location. e.g.</p></li>
</ul>
<pre><code>  mean  s = {-# SCC &quot;mean&quot; #-} sum  s / fromIntegral (length s)</code></pre>
<ul>
<li><p><strong>caf-all</strong>: function with no parameters only computed once. CAF means constant applicative forms which used for calculate that once time evaluation.</p></li>
<li><p><strong>fforce-recomp</strong>: force full recompilation.</p></li>
</ul>
<p>More details could go to chapter 25<a href="#fn3" class="footnoteRef" id="fnref3"><sup>3</sup></a> of [Real World Haskell] and GHC user guider chapter 5<a href="#fn4" class="footnoteRef" id="fnref4"><sup>4</sup></a>.</p>
<pre><code># build with prof option on
ghc --make -O2 -prof -auto-all -rtsopts p104.hs

# then run
./p104 +RTS -p -RTS</code></pre>
<h1 id="further">Further</h1>
<ol style="list-style-type: decimal">
<li>Chapter 25 in Real Work Haskell about profile</li>
</ol>
<div class="footnotes">
<hr />
<ol>
<li id="fn1"><p><a href="http://www.haskell.org/haskellwiki/Euler_problems/100_to_110">Haskell Wiki Euler Problem</a><a href="#fnref1">↩</a></p></li>
<li id="fn2"><p><a href="http://comments.gmane.org/gmane.comp.lang.haskell.beginners/9175">Haskell Beginner 9175</a><a href="#fnref2">↩</a></p></li>
<li id="fn3"><p><a href="http://book.realworldhaskell.org/read/profiling-and-optimization.html">Profiling and optimization</a><a href="#fnref3">↩</a></p></li>
<li id="fn4"><p><a href="http://www.haskell.org/ghc/docs/latest/html/users_guide/profiling.html">GHC User Guider</a><a href="#fnref4">↩</a></p></li>
</ol>
</div>]]></description>
    <pubDate>Thu, 15 Dec 2011 00:00:00 UT</pubDate>
    <guid>http://freizl.github.io//posts/2011-12-15-euler-problem-104.html</guid>
</item>

    </channel> 
</rss>
