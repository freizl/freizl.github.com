* React

* Redux
  - ~state~ plain javascript object
  - ~store~ has state, dispatch, subscribe
  - ~reducer~ take previous ~state~ and ~action~, return an new
    ~state~
  - ~combineReducers~
  - how to pass ~store~ down to children? props v.s. context
  - ~Provider~
  - ~connect~

#+BEGIN_SRC haskell
  data State = ??

  data Action a = Action { type :: String
                         , value :: a
                         }
  data Reducer = Reducer { State -> Action a -> State }

  combineReducers :: [Reducers] -> Reducer
  combineReducers = undefined
#+END_SRC

#+BEGIN_SRC plantuml :file ./imgs/redux-high-level.png
  @startuml
  [*] --> StateA
  StateA --> StateB: applyReducer(reducers, action)

  @enduml
#+END_SRC

#+CAPTION: Redux High Level
#+RESULTS:
[[file:./imgs/redux-high-level.png]]


* React-Redux

#+CAPTION: React Redux High Level
#+ATTR_HTML: :width 200px
#+ATTR_HTML: :height 200px
#+ATTR_HTML: :style transform: rotate(90deg);
[[file:imgs/react-redux-high-level.jpg]]

  1. [ ] looks like react-redux didn't encourage to use /State/ but
     just /Props/ at /Component/ level. How does it force to re-render
     the /Component/ when /Props/ changed.

** Provider

#+BEGIN_SRC javascript
  class Provider extends Component {

      // what's this function?
      getChildContext() {
          return { [storeKey]: this[storeKey], [subscriptionKey]: null }
      }

      constructor(props, context) {
          super(props, context)
          this[storeKey] = props.store;
      }

      render() {
          // what is `Children`
          return Children.only(this.props.children)
      }
  }

  if (process.env.NODE_ENV !== 'production') {
      Provider.prototype.componentWillReceiveProps = function (nextProps) {
          if (this[storeKey] !== nextProps.store) {
              warnAboutReceivingStore()
          }
      }
  }

  // Assume this is type definition to prop and context
  Provider.propTypes = {
      store: storeShape.isRequired,
      children: PropTypes.element.isRequired,
  }
  Provider.childContextTypes = {
      [storeKey]: storeShape.isRequired,
      [subscriptionKey]: subscriptionShape,
  }

#+END_SRC

** Connect

#+BEGIN_QUOTE
Now it's time to hook up those presentational components to Redux by
creating some containers. Technically, a container component is just a
React component that uses store.subscribe() to read a part of the
Redux state tree and supply props to a presentational component it
renders. You could write a container component by hand, but we suggest
instead generating container components with the React Redux library's
connect() function, which provides many useful optimizations to
prevent unnecessary re-renders. (One result of this is that you
shouldn't have to worry about the React performance suggestion of
implementing shouldComponentUpdate yourself.)
#+END_QUOTE

   - [ ] what are possible unnecessary re-renders?
   - [ ] isn't ~store~ available at all children component?
   - [ ] isn't ~props~ specific to Component? hence need to read
     ~store~ and map to ~props~?
   - [ ] isn't ~props~ sort of readonly but shall update ~state~ when
     store changed?
   - [ ] does it make to have global ~props~ derived from ~store~?
     like the update model function from Elm Architecture.

** References

* Redux Middleware
  - [[https://redux-observable.js.org/][Redux Observable]]
  - Redux saga
  - Redux thunk

* prop-types

* hoist-non-react-statics
* deep-freeze
